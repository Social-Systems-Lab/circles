import { FormSchema } from "../../../models/models";
import { z } from "zod";

// Zod schema for validation
export const globalServerSettingsValidationSchema = z.object({
    name: z.string().min(1, "Server name is required"),
    description: z.string().optional(),
    url: z.string().url("Invalid URL format").min(1, "Server URL is required"),
    registryUrl: z.string().url("Invalid URL format").optional().or(z.literal("")), // Allow empty string or valid URL
    jwtSecret: z.string().min(1, "JWT Secret is required"),
    openaiKey: z.string().min(1, "OpenAI API Key is required"),
    mapboxKey: z.string().min(1, "Mapbox API Key is required"),
    defaultCircleId: z.string().optional(), // Keep this for now, might be relevant globally
    did: z.string().optional(), // Add the server DID field (read-only, generated by server)
});

// Type inferred from Zod schema
export type GlobalServerSettingsFormData = z.infer<typeof globalServerSettingsValidationSchema>;

// FormSchema for DynamicForm (if we were still using it, but good for structure reference)
export const globalServerSettingsFormSchema: FormSchema = {
    id: "global-server-settings-form", // New ID for global context
    title: "Global Server Settings",
    description: "Configure global server settings for this Circles instance",
    button: {
        text: "Save Global Configuration",
    },
    fields: [
        {
            name: "defaultCircleId",
            type: "hidden", // Still hidden, might be set elsewhere or removed later
            label: "Default Circle ID",
            required: false,
        },
        {
            name: "name",
            label: "Server Name",
            type: "text",
            required: true,
            description: "Name of this Circles instance",
        },
        {
            name: "description",
            label: "Description",
            type: "textarea",
            required: false,
            description: "Description of this Circles instance",
        },
        {
            name: "url",
            label: "Server URL",
            type: "text",
            required: true,
            description: "The public URL of this Circles instance",
        },
        {
            name: "registryUrl",
            label: "Circles Registry URL",
            type: "text", // Changed from registry-info as that might be custom field type
            required: false,
            description: "The URL of the Circles Registry service (optional)",
        },
        {
            name: "jwtSecret",
            label: "JWT Secret",
            type: "password",
            required: true,
            description: "Secret key for signing JWT tokens for user authentication",
        },
        {
            name: "openaiKey",
            label: "OpenAI API Key",
            type: "password",
            required: true,
            description: "API key for OpenAI services (e.g., AI features)",
        },
        {
            name: "mapboxKey",
            label: "Mapbox API Key",
            type: "password",
            required: true,
            description: "API key for Mapbox services (e.g., maps)",
        },
    ],
};
