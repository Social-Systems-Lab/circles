version: "3.8"

services:
    circles:
        image: sslorg/circles:latest
        ports:
            - "${CIRCLES_PORT}:${CIRCLES_PORT}"
        env_file:
            - .env
        environment:
            - PORT=${CIRCLES_PORT}
            - NODE_ENV=${CIRCLES_NODE_ENV}
            - CIRCLES_JWT_SECRET=${CIRCLES_JWT_SECRET}
            - MONGO_HOST=db
            - MONGO_PORT=${MONGO_PORT}
            - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
            - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
            - MINIO_HOST=minio
            - MINIO_PORT=${MINIO_PORT}
            - MINIO_ROOT_USERNAME=${MINIO_ROOT_USERNAME}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
            - CIRCLES_REGISTRY_URL=${CIRCLES_REGISTRY_URL}
            - POSTMARK_API_TOKEN=${POSTMARK_API_TOKEN}
            - POSTMARK_SENDER_EMAIL=${POSTMARK_SENDER_EMAIL}
            - CIRCLES_URL=${CIRCLES_URL}
        volumes:
            - circles:/circles
        depends_on:
            - db
            - minio
        restart: unless-stopped
        networks:
            - webnet

    db:
        image: mongo:latest
        env_file:
            - .env
        environment:
            - MONGO_INITDB_DATABASE=circles
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
        ports:
            - "${MONGO_PORT}:${MONGO_PORT}"
        volumes:
            - db:/data/db
        restart: always
        networks:
            - webnet

    minio:
        image: minio/minio
        env_file:
            - .env
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USERNAME}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        command: server /data --console-address :9001
        ports:
            - "${MINIO_PORT}:${MINIO_PORT}"
            - "9001:9001"
        volumes:
            - storage:/data
        restart: unless-stopped
        networks:
            - webnet

    qdrant:
        image: qdrant/qdrant
        environment:
            QDRANT__SERVICE__GRPC_PORT: 6334
            QDRANT__SERVICE__HTTP_PORT: 6333
        ports:
            - "6333:6333"
            - "6334:6334"
        volumes:
            - qdrant_data:/qdrant/storage
        restart: always
        networks:
            - webnet

    postgres:
        image: postgres:13
        restart: always
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${SYNAPSE_POSTGRES_USERNAME}
            - POSTGRES_PASSWORD=${SYNAPSE_POSTGRES_PASSWORD}
            - POSTGRES_DB=synapse
            - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - webnet

    synapse:
        image: matrixdotorg/synapse:latest
        env_file:
            - .env
        restart: always
        depends_on:
            - postgres
        environment:
            - SYNAPSE_CONFIG_PATH=/data/homeserver.yaml
        volumes:
            - synapse_data:/data
        ports:
            - "8008:8008"
        networks:
            - webnet

    nginx:
        image: nginx:latest
        env_file:
            - .env
        volumes:
            - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
            - ./docker-entrypoint.sh:/docker-entrypoint.sh:ro
            - /etc/letsencrypt:/etc/letsencrypt:ro # Let's encrypt SSL certificates
            - /var/www/certbot:/usr/share/nginx/html # Webroot for Certbot validation
        ports:
            - "80:80"
            - "443:443"
        networks:
            - webnet
        command: ["/bin/sh", "-c", "/docker-entrypoint.sh && nginx -g 'daemon off;'"]
        restart: unless-stopped
        depends_on:
            - circles
            - minio

    watchtower:
        image: containrrr/watchtower
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always
        environment:
            WATCHTOWER_POLL_INTERVAL: 60 # Check for updates every minute
        depends_on:
            - circles
            - minio

    cron:
        build:
            context: .
            dockerfile: Dockerfile.cron
        restart: always
        env_file:
            - .env # To get CRON_SECRET
        depends_on:
            - circles # Wait for the app service to be available (basic check)
        networks:
            - webnet

volumes:
    db:
    circles:
    storage:
    qdrant_data:
    postgres_data:
    synapse_data:

networks:
    webnet:
